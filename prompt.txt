Terraform Configuration for Cross-Account Access
This configuration performs the following actions:
1. Creates a cross-account, read-only IAM role that can be assumed by a principal in another account, secured with an External ID.
2. Attaches several AWS-managed read-only policies to the role.
3. Discovers all existing ECR repositories in the AWS account and region and applies a repository policy to each one, allowing the principal from the other account to pull images.
VARIABLES
You can place these in a separate .tfvars file for better management.
=============================
variable "principal_aws_account_id" { description = "The AWS Account ID of the principal allowed to assume the role." type = string default = "324037289929" }

variable "principal_role_name" { description = "The name of the role in the principal account that will assume this role." type = string default = "tuskira-data-collection" }

variable "external_id" { description = "The external ID required to assume the role, providing a layer of security." type = string default = "tuskira20250401" sensitive = true }

variable "cross_account_role_name" { description = "The name for the created cross-account read-only IAM role." type = string default = "TuskiraCrossAccountReadOnlyRole" }

=============================
1. CROSS-ACCOUNT READ-ONLY IAM ROLE
This section creates the IAM role that will be assumed by the other account.
=============================
Defines the trust policy (AssumeRolePolicyDocument) for the IAM role.
It specifies who can assume this role.
data "aws_iam_policy_document" "cross_account_assume_role" { statement { effect = "Allow" actions = ["sts:AssumeRole"]

principals { type = "AWS" identifiers = ["arn:aws:iam::${var.principal_aws_account_id}:role/${var.principal_role_name}"]}condition { test = "StringEquals" variable = "sts:ExternalId" values = [var.external_id]}

} }

Creates the IAM role resource.
resource "aws_iam_role" "cross_account_readonly" { name = var.cross_account_role_name assume_role_policy = data.aws_iam_policy_document.cross_account_assume_role.json

This lifecycle block mimics the 'DeletionPolicy: Retain' from the CloudFormation template, preventing accidental deletion of the role.
lifecycle { prevent_destroy = true }

tags = { Description = "Cross-account read-only role for Tuskira data collection" } }

Attaches the required AWS-managed policies to the role.
resource "aws_iam_role_policy_attachment" "readonly_access" { role = aws_iam_role.cross_account_readonly.name policy_arn = "arn:aws:iam::aws:policy/ReadOnlyAccess" }

resource "aws_iam_role_policy_attachment" "securityhub_readonly" { role = aws_iam_role.cross_account_readonly.name policy_arn = "arn:aws:iam::aws:policy/AWSSecurityHubReadOnlyAccess" }

resource "aws_iam_role_policy_attachment" "ecr_readonly" { role = aws_iam_role.cross_account_readonly.name policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly" }

resource "aws_iam_role_policy_attachment" "inspector_readonly" { role = aws_iam_role.cross_account_readonly.name policy_arn = "arn:aws:iam::aws:policy/AmazonInspector2ReadOnlyAccess" }

=============================
2. ECR REPOSITORY POLICIES
NOTE ON CONVERSION FROM CLOUDFORMATION:
The original CloudFormation template used a Lambda function to dynamically find all ECR repositories and APPEND a policy statement. This is an imperative action (running code to change resources).
This Terraform configuration takes a declarative approach, which is more idiomatic for Terraform. It discovers all ECR repositories that exist at runtime and SETS a policy on them.
--- BEHAVIOR DIFFERENCE ---
- THIS WILL OVERWRITE any existing ECR repository policies that were applied manually or by another process. The entire policy is now managed by Terraform.
- The policy is only applied to repositories that exist when you run
. If you create new repositories later, you must re-runto apply the policy to them.
This declarative approach ensures the infrastructure state is explicitly defined and version-controlled in your code.
=============================
Data source to get a list of all ECR repository names in the current region.
data "aws_ecr_repositories" "all" {}

Defines the policy document that grants pull permissions.
A separate policy document is prepared for each repository found.
data "aws_iam_policy_document" "ecr_pull_policy" { for_each = data.aws_ecr_repositories.all.names

statement { sid = "CrossAccountPullFromDataCollectionRole" effect = "Allow" actions = [ "ecr:BatchGetImage", "ecr:GetDownloadUrlForLayer", "ecr:DescribeImages", "ecr:ListImages", "ecr:BatchCheckLayerAvailability" ]

principals { type = "AWS" identifiers = [aws_iam_role.cross_account_readonly.arn]}

} }

Applies the defined policy to each ECR repository discovered by the data source.
resource "aws_ecr_repository_policy" "cross_account_pull" { for_each = data.aws_ecr_repositories.all.names

repository = each.key policy = data.aws_iam_policy_document.ecr_pull_policy[each.key].json }

=============================
3. OUTPUTS
This section defines the outputs from our Terraform configuration.
=============================
output "cross_account_read_only_role_arn" { description = "ARN of the newly created cross-account read-only role." value = aws_iam_role.cross_account_readonly.arn }
